void wifiLedOn()
{
	if (wifipin!=255) digitalWrite(wifipin, LEDon);
}

void wifiLedOff()
{
	if (wifipin!=255) digitalWrite(wifipin, LEDoff);
}

void onWifiConnect(const WiFiEventStationModeConnected &event)
{
	wifiFlag = true;
	wifiLedOn();
	
	lcd.setCursor(0,1);
	lcd.print("                ");
	lcd.setCursor(0,1);
	lcd.print(" WIFI CONECTADO ");
#ifdef DEBUG
	Serial.println(F("\n[ INFO ] WiFi STA Connected"));
#endif
	//mqttReconnectTimer.detach();
}
void onWifiDisconnect(const WiFiEventStationModeDisconnected &event)
{
	mqttReconnectTimer.detach();
	if (wifiFlag)
	{
		lcd.setCursor(0,1);
		lcd.print("                ");
		lcd.setCursor(0,1);
		lcd.print("Wifi Desconectado ");
#ifdef DEBUG
		Serial.println(F("[ INFO ] WiFi STA Disconnected"));		
#endif
	wifiFlag = false;
	wifiLedOff();
	}
}

bool ICACHE_FLASH_ATTR startAP(IPAddress apip, IPAddress apsubnet, int hid, const char *ssid, const char *password = NULL)
{
	inAPMode = true;
	WiFi.mode(WIFI_AP);
#ifdef DEBUG
	Serial.print(F("[ INFO ] Configuring access point... "));
#endif
	lcd.setCursor(0,1);
	lcd.print("                ");
	lcd.setCursor(0,1);
	lcd.print("+Ponto de acesso");
  	WiFi.softAPConfig(apip, apip, apsubnet);

	bool success;
	if (hid == 1)
	{
		success = WiFi.softAP(ssid, password, 3, true);
	}
	else
	{
		success = WiFi.softAP(ssid, password);
	}
#ifdef DEBUG
	Serial.println(success ? F("Ready") : F("Failed!"));
#endif

	if (!success)
	{
		ESP.restart();
	}
	else wifiLedOn();

#ifdef DEBUG
	IPAddress myIP = WiFi.softAPIP();

	Serial.print(F("[ INFO ] AP IP address: "));
	Serial.println(myIP);
	Serial.printf("[ INFO ] AP SSID: %s\n", ssid);
#endif
	isWifiConnected = success;
	return success;
}

// Fallback to AP Mode, so we can connect to ESP if there is no Internet connection
void ICACHE_FLASH_ATTR fallbacktoAPMode()
{
	inAPMode = true;
#ifdef DEBUG
	Serial.println(F("[ INFO ] ESP-RFID is running in Fallback AP Mode"));
#endif
	lcd.setCursor(0,1);
	lcd.print("                ");
	lcd.setCursor(0,1);
	lcd.print("Modo de Configuração");

	for (int positionCounter = 0; positionCounter < 5; positionCounter++) {
		// scroll one position left:
		lcd.scrollDisplayLeft();
		// wait a bit:
		delay(150);
	}
	for (int positionCounter = 0; positionCounter < 5; positionCounter++) {
		// scroll one position left:
		lcd.scrollDisplayRight();
		// wait a bit:
		delay(150);
	}

	uint8_t macAddr[6];
	WiFi.softAPmacAddress(macAddr);
	char ssid[15];
	sprintf(ssid, "BRTec - %02x%02x%02x", macAddr[3], macAddr[4], macAddr[5]);
	WiFi.mode(WIFI_AP);
	bool success;
	success = WiFi.softAP(ssid);
	isWifiConnected = success;
	if (success){
	wifiLedOn();
	}
}

// Try to connect Wi-Fi
bool ICACHE_FLASH_ATTR connectSTA(const char *ssid, const char *password, byte bssid[6])
{
	WiFi.mode(WIFI_STA);
	WiFi.begin(ssid, password, 0, bssid);
#ifdef DEBUG
	Serial.print(F("[ INFO ] Trying to connect WiFi: "));
	Serial.print(ssid);
#endif
	lcd.setCursor(0,1);
	lcd.print("                ");
	lcd.setCursor(0,1);
	lcd.print("Tentando Conectar");
	lcd.setCursor(0,0);
	lcd.print("                ");
	lcd.setCursor(0,0);
	lcd.print(ssid);
	unsigned long now = millis();
	uint8_t timeout = 20; // define when to time out in seconds
	Serial.println();
	do
	{
		if (WiFi.status() == WL_CONNECTED)
		{
			wifiLedOn();
			break;
		}
		delay(500);
		if (wifipin!=255) digitalWrite(wifipin, !digitalRead(wifipin));
#ifdef DEBUG
		if (!wifiFlag) Serial.print(F("."));
#endif
	} while (millis() - now < timeout * 1000);
	//} while ((millis() - now < timeout * 1000)||noAPfallback);
	// We now out of the while loop, either time is out or we connected. check what happened
	if (WiFi.status() == WL_CONNECTED)
	{
		// Assume time is out first and check
#ifdef DEBUG
		//Serial.println();
		Serial.print(F("[ INFO ] Client IP address: "));
		Serial.println(WiFi.localIP());
#endif
		isWifiConnected = true;
		String data = ssid;
		data += " " + WiFi.localIP().toString();
		writeEvent("INFO", "wifi", "WiFi is connected", data);
		lcd.setCursor(0,1);
		lcd.print("                ");
		lcd.setCursor(0,1);
		lcd.print(" WIFI CONECTADO ");
		lcd.setCursor(0,0);
		lcd.print("                ");
		lcd.setCursor(0,0);
		lcd.print("BRTec RFID v2.2");
		delay(500);
		return true;
	}
	else
	{
		lcd.setCursor(0,1);
		lcd.print("                ");
		lcd.setCursor(0,1);
		lcd.print(" TEMPO ESGOTADO ");
		lcd.setCursor(0,0);
		lcd.print("                ");
		lcd.setCursor(0,0);
		lcd.print("BRTec RFID v2.2");
		// We couln't connect, time is out, inform
#ifdef DEBUG
		Serial.println();
		Serial.println(F("[ WARN ] Couldn't connect in time"));
#endif
		return false;
	}
}

void ICACHE_FLASH_ATTR disableWifi()
{
	isWifiConnected = false;
	WiFi.disconnect(true);
#ifdef DEBUG
	Serial.println(F("Turn wifi off."));
#endif
}

void ICACHE_FLASH_ATTR enableWifi()
{
#ifdef DEBUG
	Serial.println(F("[ INFO ] Restarting the board to connect wi-fi again"));
#endif
	ESP.restart();
}
